local UILibrary = loadstring(game:HttpGet('https://pastebin.com/raw/LqTuPsv1'))()

local gui = UILibrary.CreateGUI()

UILibrary.UpdateTitleAndDescription("Silent aimbot v4", "By CapybaraScript")

local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

local smoothness = 0.2
local teamCheck = false
local wallCheck = true
local aimDistance = 100
local aimPart = "Head"
local ringSize = 120
local cameraLock = false
local ringColor = Color3.fromRGB(0, 0, 255)
local checkAlive = true
local isActive = false
local lockedPlayer = nil
local prediction = false
local predictionTimeHorizontal = 0.08
local predictionTimeVertical = 0.02
local predictionOffset = false
local offsetHorizontal = 0.5
local offsetVertical = 0.3
local ring = Drawing.new("Circle"); ring.Radius = ringSize; ring.Thickness = 2; ring.Color = ringColor; ring.Filled = false; ring.Visible = false

Camera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
    ring.Position = Camera.ViewportSize / 2
end)
ring.Position = Camera.ViewportSize / 2

local existingGui = CoreGui:FindFirstChild("aimbotxd")
if existingGui then existingGui:Destroy() end

local screenGui = Instance.new("ScreenGui"); screenGui.Name, screenGui.Parent = "mygui", game:GetService("CoreGui"); 
local button = Instance.new("TextButton"); 
local UICorner = Instance.new("UICorner"); 
local clickSound = Instance.new("Sound"); 

button.Name, button.Size, button.Position, button.Text, button.Font, button.TextSize, button.TextColor3, button.BackgroundColor3, button.BackgroundTransparency, button.Draggable, button.BorderSizePixel, button.Parent, UICorner.CornerRadius, UICorner.Parent = 
    "Button", UDim2.new(0, 100, 0, 50), UDim2.new(1, -110, 0, 10), "OFF", Enum.Font.Gotham, 14, Color3.fromRGB(255, 255, 255), Color3.fromRGB(30, 30, 30), 0.6, true, 0, screenGui, UDim.new(0, 10), button
clickSound.SoundId, clickSound.Volume, clickSound.Parent = "rbxassetid://1673280232", 0.5, button

local function toggleButton()
    isActive = not isActive
    if isActive then
        button.Text = "ON"
        button.BackgroundColor3 = Color3.fromRGB(173, 216, 230)
        ring.Visible = true
    else
        button.Text = "OFF"
        button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
        ring.Visible = false
        lockedPlayer = nil
    end

    clickSound:Play()

    button:TweenSize(UDim2.new(0, 110, 0, 60), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
    wait(0.2)
    button:TweenSize(UDim2.new(0, 100, 0, 50), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
end

button.MouseButton1Click:Connect(toggleButton)

local function isPointInRing(screenPosition)
    local center = ring.Position
    local distance = (screenPosition - center).Magnitude
    local tolerance = 10
    return distance <= (ring.Radius + tolerance)
end

local function isWallBetween(targetPosition, targetCharacter)
    if not wallCheck then return false end

    local cameraPosition = Camera.CFrame.Position
    local direction = (targetPosition - cameraPosition).Unit
    local distance = (targetPosition - cameraPosition).Magnitude
    local ray = Ray.new(cameraPosition, direction * distance)

    local ignoreList = {Players.LocalPlayer.Character, targetCharacter}
    local hit, position = workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)

    return hit and hit.CanCollide
end

local function findClosestPlayerInRing()
    local localPlayer = Players.LocalPlayer
    local closestPlayer = nil
    local closestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character then
            if teamCheck and player.Team == localPlayer.Team then
                continue
            end

            local character = player.Character
            local humanoid = character:FindFirstChild("Humanoid")
            if checkAlive and (not humanoid or humanoid.Health <= 0) then
                continue
            end

            local targetParts = {"Head", "Torso", "UpperTorso", "LowerTorso", "HumanoidRootPart"}
            local inRing = false
            local closestPart = nil

            for _, partName in pairs(targetParts) do
                local targetPart = character:FindFirstChild(partName)
                if targetPart then
                    local screenPosition, onScreen = Camera:WorldToViewportPoint(targetPart.Position)
                    if onScreen and isPointInRing(Vector2.new(screenPosition.X, screenPosition.Y)) then
                        if not isWallBetween(targetPart.Position, character) then
                            inRing = true
                            closestPart = targetPart
                            break
                        end
                    end
                end
            end

            if inRing then
                local distance = (character.HumanoidRootPart.Position - localPlayer.Character.HumanoidRootPart.Position).Magnitude
                if distance <= aimDistance and distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer, closestDistance
end

local function predictPlayerMovement(player, targetPart)
    if not prediction then return targetPart.Position end

    local velocity = player.Character.HumanoidRootPart.AssemblyLinearVelocity
    local predictionPosition = targetPart.Position

    if velocity.Magnitude > 0 then
        predictionPosition = predictionPosition + (velocity * predictionTimeHorizontal)
    end

    predictionPosition = predictionPosition + Vector3.new(0, velocity.Y * predictionTimeVertical, 0)

    if predictionOffset then
        predictionPosition = predictionPosition + Vector3.new(offsetHorizontal, offsetVertical, 0)
    end

    return predictionPosition
end

local function focusOnClosestPlayerInRing()
    if not isActive then return end

    ring.Radius = ringSize
    ring.Color = ringColor

    local closestPlayer, closestDistance
    if cameraLock and lockedPlayer then
        closestPlayer = lockedPlayer
    else
        closestPlayer, closestDistance = findClosestPlayerInRing()
        if cameraLock and closestPlayer then
            lockedPlayer = closestPlayer
        end
    end

    if closestPlayer and closestPlayer.Character then
        local targetPart = closestPlayer.Character:FindFirstChild(aimPart)
        if not targetPart then
            targetPart = closestPlayer.Character:FindFirstChild("Torso") or closestPlayer.Character:FindFirstChild("UpperTorso")
        end

        if targetPart then
            local predictedPosition = predictPlayerMovement(closestPlayer, targetPart)
            Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.CFrame.Position, predictedPosition), smoothness)
        end
    end
end

RunService.RenderStepped:Connect(focusOnClosestPlayerInRing)

UILibrary.CreateDropdown(gui.ScrollFrame, { "Head", "HumanoidRootPart", "LeftHand", "RightHand", "LeftLeg", "RightLeg" }, "Head", function(selected)
    aimPart = selected
end)

UILibrary.CreateTextbox(gui.ScrollFrame, "Fov", 120, function(value)
    ringSize = tonumber(value)
end)

UILibrary.CreateTextbox(gui.ScrollFrame, "Aim Distance", 100, function(value)
    aimDistance = tonumber(value)
end)

UILibrary.CreateToggleButton(gui.ScrollFrame, "Team Check", false, function(state)
    teamCheck = state
end)

UILibrary.CreateTextbox(gui.ScrollFrame, "Smoothness", 0.2, function(value)
    smoothness = tonumber(value)
end)

UILibrary.CreateTextbox(gui.ScrollFrame, "Prediction Time Horizontal", 0.08, function(value)
    predictionTimeHorizontal = tonumber(value)
end)

UILibrary.CreateTextbox(gui.ScrollFrame, "Prediction Time Vertical", 0.02, function(value)
    predictionTimeVertical = tonumber(value)
end)

UILibrary.CreateTextbox(gui.ScrollFrame, "Offset Prediction Horizontal", 0.5, function(value)
    offsetHorizontal = tonumber(value)
end)

UILibrary.CreateTextbox(gui.ScrollFrame, "Offset Prediction Vertical", 0.3, function(value)
    offsetVertical = tonumber(value)
end)

UILibrary.CreateToggleButton(gui.ScrollFrame, "Wall Check", wallCheck, function(state)
    wallCheck = state
end)

UILibrary.CreateToggleButton(gui.ScrollFrame, "Camera Lock", cameraLock, function(state)
    cameraLock = state
end)

UILibrary.CreateToggleButton(gui.ScrollFrame, "Check Alive", checkAlive, function(state)
    checkAlive = state
end)

UILibrary.CreateToggleButton(gui.ScrollFrame, "Prediction", prediction, function(state)
    prediction = state
end)

UILibrary.CreateToggleButton(gui.ScrollFrame, "Offset Prediction", predictionOffset, function(state)
    predictionOffset = state
end)

UILibrary.CreateColorPicker(gui.ScrollFrame, "Ring Color", ringColor, function(color)
    ringColor = color
end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local plr = Players.LocalPlayer

local highlight = Instance.new("Highlight")
highlight.Name, highlight.DepthMode = "Highlight", Enum.HighlightDepthMode.AlwaysOnTop
highlight.FillColor, highlight.OutlineColor = Color3.fromRGB(0,255,255), Color3.fromRGB(255,255,255)
highlight.FillTransparency, highlight.OutlineTransparency = 0.7, 0

local esp, teamCheck = false, false

local function Cleanup()
    for _, p in pairs(Players:GetPlayers()) do
        if p.Character then
            local root = p.Character:FindFirstChild("HumanoidRootPart")
            if root then
                for _, obj in pairs(root:GetChildren()) do
                    if obj:IsA("Highlight") then
                        obj:Destroy()
                    end
                end
            end
        end
    end
end

local function GetColor(p)
    return p.Team and p.Team.TeamColor.Color or highlight.FillColor
end

local function UpdateHighlight(c, p)
    local root = c:FindFirstChild("HumanoidRootPart")
    if not root then return end
    
    local h = root:FindFirstChildOfClass("Highlight")
    local color = teamCheck and GetColor(p) or highlight.FillColor
    
    if h then
        h.FillColor = color
    elseif esp and c.Humanoid.Health > 0 then
        h = highlight:Clone()
        h.FillColor, h.Adornee, h.Parent = color, c, root
    end
end

local function UpdatePlayer(p)
    if not esp or p == plr then return end
    local c = p.Character
    if c and c:FindFirstChild("Humanoid") then
        UpdateHighlight(c, p)
    end
end

local function TrackPlayer(p)
    local function TrackCharacter(c)
        local h = c:WaitForChild("Humanoid")
        h:GetPropertyChangedSignal("Health"):Connect(function()
            UpdatePlayer(p)
        end)
        UpdatePlayer(p)
    end
    
    p.CharacterAdded:Connect(TrackCharacter)
    if p.Character then TrackCharacter(p.Character) end
    
    if p:FindFirstChild("Team") then
        p.Team:GetPropertyChangedSignal("TeamColor"):Connect(function()
            if esp then UpdatePlayer(p) end
        end)
    end
end

Players.PlayerAdded:Connect(TrackPlayer)
Players.PlayerRemoving:Connect(function(p)
    if p.Character then
        local root = p.Character:FindFirstChild("HumanoidRootPart")
        if root then root:FindFirstChildOfClass("Highlight"):Destroy() end
    end
end)

for _,p in pairs(Players:GetPlayers()) do TrackPlayer(p) end

RunService.Heartbeat:Connect(function()
    if esp then for _,p in pairs(Players:GetPlayers()) do UpdatePlayer(p) end end
end)

UILibrary.CreateToggleButton(gui.ScrollFrame, "Esp toggle", false, function(s)
    esp = not esp
    Cleanup()
    if esp then for _,p in pairs(Players:GetPlayers()) do UpdatePlayer(p) end end
end)

UILibrary.CreateToggleButton(gui.ScrollFrame, "Esp team check", false, function(s)
    teamCheck = not teamCheck
    if esp then for _,p in pairs(Players:GetPlayers()) do UpdatePlayer(p) end end
end)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local plr = Players.LocalPlayer

local hitbox = {
    size = 10,
    original = 10,
    disabled = true,
    collision = false,
    transparency = 0.9,
    material = Enum.Material.SmoothPlastic,
    color = Color3.fromRGB(169, 169, 169),
    border = Color3.fromRGB(173, 216, 230)
}

local function UpdateHitbox(v)
    if v == plr then return end
    pcall(function()
        local root = v.Character and v.Character:FindFirstChild("HumanoidRootPart")
        if not root then return end
        
        if hitbox.disabled then
            root.Size = Vector3.new(2, 2, 2)
        else
            root.Size = Vector3.new(hitbox.size, hitbox.size, hitbox.size)
            root.Transparency = hitbox.transparency
            root.Material = hitbox.material
            root.CanCollide = hitbox.collision
        end

        local box = root:FindFirstChild("HitboxBorder") or Instance.new("SelectionBox")
        box.Name, box.Adornee, box.Parent = "HitboxBorder", root, root
        box.LineThickness, box.Color3 = 0.05, hitbox.border
        box.SurfaceTransparency = hitbox.disabled and 1 or hitbox.transparency
        box.Transparency = hitbox.disabled and 1 or 0
    end)
end

RunService.Heartbeat:Connect(function()
    for _,v in pairs(Players:GetPlayers()) do UpdateHitbox(v) end
end)

UILibrary.CreateToggleButton(gui.ScrollFrame, "Hitbox Expander", false, function(s)
    hitbox.disabled = not s
    hitbox.size = hitbox.disabled and 2 or hitbox.original
end)

UILibrary.CreateTextbox(gui.ScrollFrame, "Hitbox Size", tostring(hitbox.size), function(v)
    hitbox.original = tonumber(v)
    if not hitbox.disabled then hitbox.size = tonumber(v) end
end)

UILibrary.CreateTextbox(gui.ScrollFrame, "Hitbox Transparency", tostring(hitbox.transparency), function(v)
    hitbox.transparency = tonumber(v)
end)

UILibrary.CreateColorPicker(gui.ScrollFrame, "Hitbox Color", hitbox.color, function(c)
    hitbox.color, hitbox.border = c, c
end)

UILibrary.CreateToggleButton(gui.ScrollFrame, "Hitbox Collision", false, function(s)
    hitbox.collision = s
end)
